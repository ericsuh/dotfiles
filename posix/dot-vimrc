"""""""""""""""""""""
" Core vim settings "

set nocompatible
set visualbell
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,prc
" Some servers don't like backup files
set nobackup
set nowritebackup
let mapleader = ","
nnoremap ' `
nnoremap ` '

""" Editing

set updatetime=300
set hidden " Work with multiple buffers without having to save
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested cwindow
filetype plugin on

""" Searching

set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap <leader>/ :noh<CR>  " Allows ,/ to clear search highlights
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case

"""""""""""""""""""
" Plugin settings "

""" CoC

let g:coc_global_extensions = [ 'coc-tsserver', 'coc-prettier' ]
nmap <leader>ca <Plug>(coc-codeaction-line)
nmap <leader>cc <Plug>(coc-fix-current)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>rf <Plug>(coc-refactor)
xmap <leader>ff  <Plug>(coc-format-selected)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Map <tab> for trigger completion, completion confirm, and jump
inoremap <silent><expr> <TAB>
  \ pumvisible() ? coc#_select_confirm() :
  \ coc#expandableOrJumpable() ?
  \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

""" typescript-vim

let g:typescript_compiler_options = ''

"""" Indent Guides

nnoremap <silent> <leader>ig <Plug>IndentGuidesToggle
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#afffd7 ctermbg=158
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#afffff ctermbg=159

if filereadable("~/.vimrc_os")
	source "~/.vimrc_os"
endif
if filereadable("~/.vimrc_local")
	source "~/.vimrc_local"
endif

"""""""""""""""""""
" Visual settings "

""" Line numbering

set number
nnoremap <leader>n :set nonumber!<CR>:set foldcolumn=0<CR>

""" Colorscheme

syntax enable
set background=light

""" Tweaks to fix highlighting for CoC
" Fixes the colors in the suggest lists for CoC
hi Pmenu ctermbg=black ctermfg=white
hi CocHighlight ctermbg=white ctermfg=black

""" Syntax highlighting settings

set showmatch " Parentheses and braces
set backspace=indent,eol,start " fix backspace
if has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif
set list
set listchars=tab:>\ ,trail:~,extends:>,precedes:<

""" Whitespace and folds

filetype indent on
set autoindent  " Copy indent from the row above
set softtabstop=4 shiftwidth=4 tabstop=4
set expandtab
set foldmethod=manual

nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

""" Command and status lines

set showcmd
set wildmenu  " command autocomplete
set wildmode=list:longest

set laststatus=2
set statusline =
set statusline +=\ %n             "buffer number
set statusline +=\ %y             "file type
set statusline +=\ %<\"%f\"       "full path
set statusline +=\ %m             "modified flag
set statusline +=%r               "read-only flag
" set statusline +=%=             "left-right seperator
set statusline +=\ Line\ %l\ of\ %L  "current line / total lines
set statusline +=\ Col\ %c            "column number

packloadall
silent! helptags ALL
